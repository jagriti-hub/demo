---
- debug:
    var: EnvironmentName
- name: load the parameter file
  include_vars: 
    file: "{{ deploymentfolder }}/parameter.json"
    name: parameter
- name: Load code.yaml file fo  the enviroinment
  template:
    src: "{{Environmenthome}}/{{EnvironmentName}}/code.yaml"
    dest: "{{deploymentfolder}}/code.yaml"
- name: Loading Code
  slurp:
    src: "{{deploymentfolder}}/code.yaml"
  register: code

- name: Loading Resource Meta File
  include_vars:
    file: "{{Environmenthome}}/{{EnvironmentName}}/meta.yaml"
    name: meta
- name: Create Service Json
  copy:
    dest: "{{deploymentfolder}}/service.json"
    content:
      ServiceId: "{{meta.EnvironmentId}}"
      ServiceType: "{{meta.ServiceType}}"
      Input: "{{meta.Input}}"
      EnvironmentType: "{{meta.EnvironmentType}}"
      EnvironmentId: "{{meta.EnvironmentId}}"
      ParameterOptions: "{{meta.ParameterOptions}}"
      DependentEnvironments: "{{meta.DependentEnvironments}}"
      OutputOptions: "{{meta.OutputOptions}}"
      CostType: "{{meta.CostType}}"
      UsageType: "{{meta.UsageType}}"
      Actions: "{{meta.Actions}}"
      
- name: Setting the Table name and file name for Service
  set_fact:
    datafile: "{{deploymentfolder}}/service.json"
    tablename: "{{servicetablename}}"
- name: Create Service DB push script
  template:
    src: archeplay.j2
    dest: "{{deploymentfolder}}/service.py"
- name: push environment service data to DB
  script: "{{deploymentfolder}}/service.py"
  args:
    executable: python3
- name: Remove Service Db push File
  file: 
    name: "{{deploymentfolder}}/service.py"
    state: absent
- name: Create Environment Json
  copy:
    dest: "{{deploymentfolder}}/environment.json"
    content:
      EnvironmentId: "{{meta.EnvironmentId}}"
      EnvironmentType: "{{meta.EnvironmentType}}"
      EnvironmentName: "{{meta.EnvironmentName}}"
      EnvironmentGroup: "{{meta.EnvironmentGroup}}"
      DependentEnvironments: "{{meta.DependentEnvironments}}"
      ParentEnvironment: "{{meta.ParentEnvironment}}"
      ActionEnvironment: "{{meta.ActionEnvironment}}"
      EnvironmentDocs: "{{meta.EnvironmentDocs}}"
      ServiceId: "{{meta.EnvironmentId}}"
      CreditsPerHour: "{{meta.CreditsPerHour }}"
- name: Set Environment File and Table name
  set_fact:
    datafile: "{{deploymentfolder}}/environment.json"
    tablename: "{{environmenttablename}}"
- name: Create Environment DB script
  template:
    src: archeplay.j2
    dest: "{{deploymentfolder}}/environment.py"
- name: push environment data to DB
  script: "{{deploymentfolder}}/environment.py"
  args:
    executable: python3
- debug:
    var: deployinfra
- name: Create Environment Json
  copy:
    dest: "{{deploymentfolder}}/deployenvironment.json"
    content:
      AccountId: "{{deployinfra.AccountId}}"
      EmailId: "{{deployinfra.EmailId}}"
      Region: "{{deployinfra.Region}}"
      DeployId: "{{deploymentid}}"
      EnvironmentId: "{{EnvironmentName}}"
      Template: "{{code['content'] | b64decode}}"
      Parameters: "{{ lookup('file', '{{deploymentfolder}}/parameter.json') | from_json  }}"
- name: Set Environment File and Table name
  set_fact:
    datafile: "{{deploymentfolder}}/deployenvironment.json"
    tablename: "{{deployenvironmenttable}}"
- name: Create deploy Environment DB script
  template:
    src: archeplay.j2
    dest: "{{deploymentfolder}}/deployenvironment.py"
- name: push environment data to DB
  script: "{{deploymentfolder}}/deployenvironment.py"
  args:
    executable: python3
- name: Deploy the Docker of the Environment
  command: "docker build -t  kubernetes-executor {{Environmenthome}}/roles/deployecs/files/archeplayecsexecutor/"
- name: Deploy the Docker of the Environment
  command: "docker run -e EnvironmentDb={{deployenvironmenttable}} -e DeployId={{deploymentid}} -e Action={{action}} -e AssumeRoleName={{AssumeRoleName}} kubernetes-executor"
- name: Write Output from database
  script: outputs.py "{{deployenvironmenttable}}" "{{deploymentid}}" "{{deploymentfolder}}/output.json"
  args:
    executable: python3
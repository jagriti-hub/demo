---
- name: Step {{stepno}} - {{stepname}} - Executing
  block:
    - name: 
      file:
        path: "/tmp/{{apiname}}"
        state: absent
    - name: Step {{stepno}} - {{stepname}} - Task 1  - checkcodecommit - Check the Repository exist
      command: aws codecommit get-repository --repository-name {{apiname}} --region {{apenvironment.region}}
      register: checkcodecommit
      ignore_errors: true
    - name: Step {{stepno}} - {{stepname}}  - Task 7 - failifexist - Check repository is New and empty repo
      set_fact:
        codecommitexist: true
      when: checkcodecommit.rc == 0
    - name: Step {{stepno}} - {{stepname}}  - Task 7 - failifexist - Check repository is New and empty repo
      fail:
        msg: "{{apiname}} repository already exist"
      when: checkcodecommit.rc == 0
    - name: Step {{stepno}} - {{stepname}} - Task 1  - createcodecommit  - Create Code Commit Repository
      community.aws.aws_codecommit:
        name: "{{apiname}}"
        state: present
        region: "{{apenvironment.region}}"
      register: createcodecommit
    - debug:
        var:  createcodecommit
    - name: Step {{stepno}} - {{stepname}}  - Task 2  - gitconfig1  - Create Code Commit Repository
      community.general.git_config:
        name: credential.helper
        scope: global
        value: '!aws codecommit credential-helper $@'
    - name: Step {{stepno}} - {{stepname}}  - Task 3 - gitconfig2  - set aws code commit http path git config
      community.general.git_config:
        name: credential.UseHttpPath
        scope: global
        value: true
    - name: Step {{stepno}} - {{stepname}}  - Task 4  - gitconfig3 - set aws code commit user email git config
      community.general.git_config:
        name: user.email
        scope: global
        value: "admin@archeplay.com" 
    - name: Step {{stepno}} - {{stepname}} - Task 5 -  gitconfig4 - set aws code commit user name git config
      community.general.git_config:
        name: user.name
        scope: global
        value: "archeplay-admin"
    - name: Step {{stepno}} - {{stepname}}  - Task 6 - clonerepo - Clone the repo
      shell: "git clone {{createcodecommit.repository_metadata.clone_url_http}} /tmp/{{apiname}}"
      register: resourceoutput2
    - debug:
        var: resourceoutput2
    - name: Step {{stepno}} - {{stepname}}  - Task 7 - checkemptyrepo - Check repository is New and empty repo
      fail:
        msg: "{{apiname}} is an non empty repository"
      when: "'warning: You appear to have cloned an empty repository' not in resourceoutput2.stderr"
    - name: Step {{stepno}} - {{stepname}}  - Task 8 - codecommitoutput - Register the outputs
      set_fact:
        update_output: "true"
        outputs:
          - OutputKey: "codecommitrepoid"
            OutputValue: "{{createcodecommit.repository_metadata.clone_url_http}}"
  rescue:
    - name: Step {{stepno}} - {{stepname}} - Faiure Message Registering
      set_fact: 
        failedtask: "{{ansible_failed_task.name}}"
    - name: Step {{stepno}} - {{stepname}} - Faiure Message Registering
      set_fact: 
        failedmessage: "{{ansible_failed_result.msg}} -- {{ansible_failed_result.stderr}}"
      register: failedmsg
      when: ansible_failed_result.msg and ansible_failed_result.stderr is defined
    - name: Step {{stepno}} - {{stepname}} - Faiure Message Registering
      set_fact: 
        failedmessage: "{{ansible_failed_result.msg}}"
      when: failedmsg is skipped
    - name: 
      fail:
        msg:  Step {{stepno}} - {{stepname}}  is failed
 
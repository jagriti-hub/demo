#Events States
# CREATE_IN_PROGRESS
# CREATE_COMPLETED
# CREATE_FAILED
# UPDATE_IN_PROGRESS
# UPDATE_COMPLETED
# UPDATE_FAILED
# DELETE_IN_PROGRESS
# DELETE_COMPLETED
# DELETE_FAILED
# ROLLBACK_IN_PROGRESS
# ROLLBACK_COMPLETED
# ROLLBACK_FAILED
# - name: Create workfolder if not exists
#   stat:
#     path: {{envdeploymentfolder}}
#   register: workfolder

# - name: Create a directory if not exists 
#   file:
#     state: directory
#     path: {{envdeploymentfolder}}
#     mode: 0755
#   when: workfolder.stat.isdir is not defined

- name: stepevent - check event file exist
  stat:
    path: "{{envdeploymentfolder}}/event.json"
  register: stat_result
- name: stepevent - create event file if not exist
  copy:
    content: "{ 'StepEvents': [] }"
    dest: "{{envdeploymentfolder}}/event.json"
    mode: 0755
  when: not stat_result.stat.exists
- name:  stepevent - load the event file
  include_vars:
    file: "{{envdeploymentfolder}}/event.json"
    name: event 
- debug: 
    var: stepstatus
- name: stepevent - record Failed events
  set_fact:
    StepEvents:
      - StepName: "{{stepname}}"
        StepNumber: "{{stepno}}"
        StepDescription: "{{stepdesc}}"
        StepStatus: "{{stepstatus}}"
        FailedTask: "{{failedtask}}"
        FailedMessage: "{{failedmessage}}"
        Timestamp: "{{ ansible_date_time.iso8601_micro }}"
  when: stepstatus == "CREATE_FAILED" or stepstatus == "UPDATE_FAILED" or stepstatus == "DELETE_FAILED" or stepstatus == "ROLLBACK_FAILED"
  register: failedstep
- name: stepevent - record Failed events
  set_fact:
    StepEvents:
      - StepName: "{{stepname}}"
        StepNumber: "{{stepno}}"
        StepDescription: "{{stepdesc}}"
        StepStatus: "{{stepstatus}}"
        Timestamp: "{{ ansible_date_time.iso8601_micro }}"
  when: stepstatus == "CREATE_IN_PROGRESS" or stepstatus == "CREATE_COMPLETED" or stepstatus == "UPDATE_IN_PROGRESS" or stepstatus == "UPDATE_COMPLETED" or stepstatus == "DELETE_IN_PROGRESS" or stepstatus == "DELETE_COMPLETED" or stepstatus == "ROLLBACK_IN_PROGRESS" or stepstatus == "ROLLBACK_COMPLETED"
- name: stepevent - update event file
  copy:
    content: "{ 'StepEvents': {{ event.StepEvents + StepEvents }} }"
    dest: "{{envdeploymentfolder}}/event.json"
- name: stepevent - publish event file
  amazon.aws.aws_s3:
    bucket: "{{ap.templaterepo}}"
    object: "events/{{apenvironment.deploymentid}}/event.json"
    src: "{{envdeploymentfolder}}/event.json"
    mode: put